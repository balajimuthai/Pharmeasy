Step 1. Unload data from redshift to an external S3 location.


unload
('SELECT
NULL as skull_objectid,
NULL as skull_namespace,
NULL as skull_opcode,
NULL as skull_schemaversion,
NULL as skull_createdat,
NULL as skull_ingestedat,
NULL as skull_updatedat,
order_id,
order_placed_at,
order_placed_date,
delivered_at,
order_category,
customer_id,
customer_name,
customer_registered_contact_number,
order_contact_number,
customer_registered_email,
order_status_id,
order_status,
delivery_address_id,
total_units,
total_line_items,
total_line_items_delivered,
total_line_items_deleted,
line_item_fill_rate,
order_source,
third_party_name,
order_app_version,
order_app_os_version,
order_phone_build,
order_doctor_name,
cnr_reason_category,
cancellation_rejection_bucket,
cnr_timestamp,
cnr_reason_id,
cnr_reason,
order_cancelled_at_stage,
subscription_id,
mrp,
discounted_mrp,
invoice_value,
coupon_code,
discount_percentage,
promotional_discount,
promotional_discount_type,
promotional_discount_value,
referral_type,
referral_discount_value,
referral_discount_type,
order_burn_amount,
rating,
offline_flag,
chronic_flag_old,
chronic_flag_new,
media_source,
medium,
campaign,
case when is_retargeting=\'True\' then \'TRUE\' else \'FALSE\' end as is_retargeting,
order_source_attribution,
install_source_attribution,
final_attribution,
user_type_monthly,
user_type_daily,
customer_type,
case when dormant_reactive_flag=\'True\' then \'TRUE\' else \'FALSE\' end as dormant_reactive_flag,
order_placed_count,
order_fulfilled_count,
total_delivery_time,
office_hour_time,
service_defect,
case when exchange_flag=\'True\' then \'TRUE\' else \'FALSE\' end as exchange_flag,
original_order_id,
updated_at,
case when base_discount_order=\'True\' then \'TRUE\' else \'FALSE\' end as base_discount_order,
order_cancelled_at_stage_timestamp,
base_discount_split,
order_type,
medicine_order_value,
otc_order_value,
unprivileged_media_source,
unprivileged_campaign,
case when unprivileged_is_retargeting=\'True\' then \'TRUE\' else \'FALSE\' end as unprivileged_is_retargeting,
unprivileged_install_source_attribution,
unprivileged_final_attribution,
unprivileged_medium,
wallet_burn,
adset,
ad,
case when ufp_qualified_flag=\'True\' then \'TRUE\' else \'FALSE\' end as ufp_qualified_flag,
case when ufp_paid_flag=\'True\' then \'TRUE\' else \'FALSE\' end as ufp_paid_flag,
case when loyalty_order=\'True\' then \'TRUE\' else \'FALSE\' end as loyalty_order,
loyalty_cashback_amount,
program_id,
variant_id,
ufp_payment_segment,
cancellation_attribution,
more_price_variations,
less_price_variations,
otc_discounted_order_value,
pl_order_value,
pl_discounted_order_value,
medicine_discounted_order_value,
current_timestamp as created_at,
attributed_touch_time,
experience_reorder_prob,
experience_score,
site_id,
tenant,
adgroup,
order_placed_date as dt
from data_model.f_order_consumer') 
to 's3://pe-skull-external-data/analytics/pe/redshift-to-hive-migration/foc_test/bootstrap_foc/'
iam_role 'arn:aws:iam::412555336306:role/pe-main-read-s3-pe-mum-prod-redshift'
CSV DELIMITER '^'
ALLOWOVERWRITE
PARALLEL OFF;


If we want to use filetype as parquet instead of csv then the data types on redshift and hive must match exactly. Parquet doesnâ€™t have a delimiter as well.


Step 2.
Create an External Table to fetch the data unloaded onto the S3 bucket.


drop table if exists data_models_temp_tables.foc_snapshot_bootstrap;


CREATE EXTERNAL TABLE data_models_temp_tables.foc_snapshot_bootstrap
(
  skull_objectid string, 
  skull_namespace string, 
  skull_opcode string, 
  skull_schemaversion string, 
  skull_createdat bigint, 
  skull_ingestedat bigint, 
  skull_updatedat bigint, 
  order_id bigint, 
  order_placed_at timestamp, 
  order_placed_date date, 
  delivered_at timestamp, 
  order_category string, 
  customer_id bigint, 
  customer_name string, 
  customer_registered_contact_number string, 
  order_contact_number string, 
  customer_registered_email string, 
  order_status_id smallint, 
  order_status string, 
  delivery_address_id int, 
  total_units int, 
  total_line_items int, 
  total_line_items_delivered int, 
  total_line_items_deleted int, 
  line_item_fill_rate double, 
  order_source string, 
  third_party_name string, 
  order_app_version string, 
  order_app_os_version string, 
  order_phone_build string, 
  order_doctor_name string, 
  cnr_reason_category string, 
  cancellation_rejection_bucket string, 
  cnr_timestamp timestamp, 
  cnr_reason_id int, 
  cnr_reason string, 
  order_cancelled_at_stage int, 
  subscription_id int, 
  mrp double, 
  discounted_mrp double, 
  invoice_value double, 
  coupon_code string, 
  discount_percentage double, 
  promotional_discount string, 
  promotional_discount_type string, 
  promotional_discount_value int, 
  referral_type string, 
  referral_discount_value int, 
  referral_discount_type string, 
  order_burn_amount double, 
  rating smallint, 
  offline_flag int, 
  chronic_flag_old int, 
  chronic_flag_new int, 
  media_source string, 
  medium string, 
  campaign string, 
  is_retargeting boolean, 
  order_source_attribution string, 
  install_source_attribution string, 
  final_attribution string, 
  user_type_monthly string, 
  user_type_daily string, 
  customer_type string, 
  dormant_reactive_flag boolean, 
  order_placed_count int, 
  order_fulfilled_count int, 
  total_delivery_time int, 
  office_hour_time int, 
  service_defect string, 
  exchange_flag boolean, 
  original_order_id bigint, 
  updated_at timestamp, 
  base_discount_order boolean, 
  order_cancelled_at_stage_timestamp timestamp, 
  base_discount_split string, 
  order_type string, 
  medicine_order_value double, 
  otc_order_value double, 
  unprivileged_media_source string, 
  unprivileged_campaign string, 
  unprivileged_is_retargeting boolean, 
  unprivileged_install_source_attribution string, 
  unprivileged_final_attribution string, 
  unprivileged_medium string, 
  wallet_burn int, 
  adset string, 
  ad string, 
  ufp_qualified_flag boolean, 
  ufp_paid_flag boolean, 
  loyalty_order boolean, 
  loyalty_cashback_amount double, 
  program_id int, 
  variant_id int, 
  ufp_payment_segment string, 
  cancellation_attribution string, 
  more_price_variations string, 
  less_price_variations string, 
  otc_discounted_order_value double, 
  pl_order_value double, 
  pl_discounted_order_value double, 
  medicine_discounted_order_value double, 
  created_at timestamp, 
  attributed_touch_time timestamp, 
  experience_reorder_prob double, 
  experience_score int, 
  site_id string, 
  tenant string, 
  adgroup string,
  dt date
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '^'
STORED AS TEXTFILE
LOCATION
's3://pe-skull-external-data/analytics/pe/redshift-to-hive-migration/foc_test/bootstrap_foc/';


Note: External tables need not be created on each bootstrap, only if the schema of the data being pushed is changed/the location is being changed, then only this step is required. Else we can directly unload the data on the S3 bucket and the data will reflect in the same table.


Step 3:
Create a partitioned table on the above external table.




set hive.exec.dynamic.partition.mode=nonstrict;
set hive.exec.dynamic.partition=true;
set hive.exec.max.dynamic.partitions=10000;
set hive.exec.max.dynamic.partitions.pernode=10000;
set hive.tez.container.size=8192;


drop table if exists data_models_temp_tables.foc_snapshot_bootstrap_partitioned;


CREATE TABLE data_models_temp_tables.foc_snapshot_bootstrap_partitioned
(
  skull_objectid string, 
  skull_namespace string, 
  skull_opcode string, 
  skull_schemaversion string, 
  skull_createdat bigint, 
  skull_ingestedat bigint, 
  skull_updatedat bigint, 
  order_id bigint, 
  order_placed_at timestamp, 
  order_placed_date date, 
  delivered_at timestamp, 
  order_category string, 
  customer_id bigint, 
  customer_name string, 
  customer_registered_contact_number string, 
  order_contact_number string, 
  customer_registered_email string, 
  order_status_id smallint, 
  order_status string, 
  delivery_address_id int, 
  total_units int, 
  total_line_items int, 
  total_line_items_delivered int, 
  total_line_items_deleted int, 
  line_item_fill_rate double, 
  order_source string, 
  third_party_name string, 
  order_app_version string, 
  order_app_os_version string, 
  order_phone_build string, 
  order_doctor_name string, 
  cnr_reason_category string, 
  cancellation_rejection_bucket string, 
  cnr_timestamp timestamp, 
  cnr_reason_id int, 
  cnr_reason string, 
  order_cancelled_at_stage int, 
  subscription_id int, 
  mrp double, 
  discounted_mrp double, 
  invoice_value double, 
  coupon_code string, 
  discount_percentage double, 
  promotional_discount string, 
  promotional_discount_type string, 
  promotional_discount_value int, 
  referral_type string, 
  referral_discount_value int, 
  referral_discount_type string, 
  order_burn_amount double, 
  rating smallint, 
  offline_flag int, 
  chronic_flag_old int, 
  chronic_flag_new int, 
  media_source string, 
  medium string, 
  campaign string, 
  is_retargeting boolean, 
  order_source_attribution string, 
  install_source_attribution string, 
  final_attribution string, 
  user_type_monthly string, 
  user_type_daily string, 
  customer_type string, 
  dormant_reactive_flag boolean, 
  order_placed_count int, 
  order_fulfilled_count int, 
  total_delivery_time int, 
  office_hour_time int, 
  service_defect string, 
  exchange_flag boolean, 
  original_order_id bigint, 
  updated_at timestamp, 
  base_discount_order boolean, 
  order_cancelled_at_stage_timestamp timestamp, 
  base_discount_split string, 
  order_type string, 
  medicine_order_value double, 
  otc_order_value double, 
  unprivileged_media_source string, 
  unprivileged_campaign string, 
  unprivileged_is_retargeting boolean, 
  unprivileged_install_source_attribution string, 
  unprivileged_final_attribution string, 
  unprivileged_medium string, 
  wallet_burn int, 
  adset string, 
  ad string, 
  ufp_qualified_flag boolean, 
  ufp_paid_flag boolean, 
  loyalty_order boolean, 
  loyalty_cashback_amount double, 
  program_id int, 
  variant_id int, 
  ufp_payment_segment string, 
  cancellation_attribution string, 
  more_price_variations string, 
  less_price_variations string, 
  otc_discounted_order_value double, 
  pl_order_value double, 
  pl_discounted_order_value double, 
  medicine_discounted_order_value double, 
  created_at timestamp, 
  attributed_touch_time timestamp, 
  experience_reorder_prob double, 
  experience_score int, 
  site_id string, 
  tenant string, 
  adgroup string
)
PARTITIONED BY (dt date);


Step 4:
Overwrite the f_order_consumer with new data


insert overwrite table data_model.f_order_consumer_snapshot partition(dt)
select * from data_models_temp_tables.foc_snapshot_bootstrap_partitioned
where dt between â€˜2015-01-01â€™ and â€˜2015-12-31â€™;
